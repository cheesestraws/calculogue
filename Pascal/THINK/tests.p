unit tests;interface{This ought to be after 'implementation' but the compiler complains, for some reason? }{and I don't have the energy to track it down now. }	uses		Stack, Ctx, tokeniser, FloatToStr;	procedure runTests;	procedure runStackTests;	procedure runTokeniserTests;	procedure runDoubleToStrTests;implementation	procedure fail (s: string);	begin		write('[FAIL] ');		writeln(s);	end;	procedure success (s: string);	begin		write('[OK] ');		writeln(s);	end;	procedure check (t: boolean; yes: string; no: string);	begin		if t then			success(yes)		else			fail(no);	end;	procedure runTests;		var			dummy: string;	begin	{ Runs a set of tests to make sure that things work. }		ShowText;		runStackTests;		runTokeniserTests;		runDoubleToStrTests;		writeln('Please press [return].');		readln(dummy);	end;	procedure runStackTests;		var			s: Stack;			e: StackElement;	begin		writeln('Calling newStack...');		s := newStack;		check(s.data <> nil, 's.data allocated', 's.data is nil');		check(s.top = 0, 's.top is correct', 's.top is incorrect');		check(s.valid, 's is valid', 's is invalid!');		writeln('String push.');		pushString(s, 'Hello world');		check(s.top = 1, 's.top is correct after pushString', 's.top is incorrect after pushString!');		writeln('Pop.');		e := pop(s);		check(e.elemType = StringElement, 'Correct element type for string', 'Bad element type.');		check(e.stringValue = 'Hello world', 'Correct string data.', 'Bad string data.');		writeln('Freeing stack.  If this doesn''t crash , it''s successful.');		freeStack(s);		writeln('Done.');	end;	procedure runTokeniserTests;		var			s: Stack;			str: string;			e: StackElement;	begin		writeln;		writeln('Testing tokeniser');		s := newStack;		str := 'a b c';		setToksStack(@s);		toksReadString(str);		check(s.top = 3, 'Expected s.top (3)', 's.top is incorrect after toksReadString.');		e := pop(s);		check(e.elemType = StringElement, 'Correct element type for string', 'Bad element type.');		check(e.stringValue = 'c', 'Correct string data.', 'Bad string data.');		freeStack(s);	end;{TODO: some Context tests.  This would mean that I need to add 'c' to the visible part of Ctx.p somewhere }	procedure testStrToDouble (s: string; d: double);		var			e: MaybeDouble;	begin		write('Testing ');		writeln(s);		e := StrToDouble(s);		check(e.maybe, 'Double could be parsed', 'Double could not be parsed.');		check(e.d = d, 'Double value as expected', 'Double value not as expected');		writeln;	end;	procedure testStrToDoubleFail (s: string);		var			e: MaybeDouble;	begin		write('Testing ');		writeln(s);		e := StrToDouble(s);		check(not e.maybe, 'This is correctly not a number', 'Somehow the system got a number out of this.');		writeln;	end;	procedure runDoubleToStrTests;		var			e: MaybeDouble;{Don't compare floats and doubles!}	begin		writeln('String -> Float tests');		testStrToDouble('1.0', 1.0);		testStrToDouble('1.7', 1.7);		testStrToDouble('123.45', 123.45);		testStrToDouble('-7.3', -7.3);		testStrToDoubleFail('k822vlj');	end;end.